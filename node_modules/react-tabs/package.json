{
  "name": "react-tabs",
  "version": "0.5.3",
  "description": "React tabs component",
  "main": "lib/main.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/rackt/react-tabs.git"
  },
  "author": {
    "name": "Matt Zabriskie"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/rackt/react-tabs/issues"
  },
  "homepage": "https://github.com/rackt/react-tabs",
  "keywords": [
    "react",
    "tabs",
    "a11y",
    "react-component"
  ],
  "peerDependencies": {
    "react": "^0.14.7",
    "react-dom": "^0.14.7"
  },
  "dependencies": {
    "classnames": "^2.2",
    "js-stylesheet": "^0.0.1"
  },
  "readme": "# react-tabs [![Build Status](https://travis-ci.org/rackt/react-tabs.svg?branch=master)](https://travis-ci.org/rackt/react-tabs)\n\nReact tabs component\n\n## Installing\n\n```bash\n$ npm install react-tabs\n```\n\n## Demo\n\nhttp://rackt.github.io/react-tabs/example/\n\n## Example\n\n```js\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar ReactTabs = require('react-tabs');\nvar Tab = ReactTabs.Tab;\nvar Tabs = ReactTabs.Tabs;\nvar TabList = ReactTabs.TabList;\nvar TabPanel = ReactTabs.TabPanel;\n\nvar App = React.createClass({\n  handleSelect: function (index, last) {\n\tconsole.log('Selected tab: ' + index + ', Last tab: ' + last);\n  },\n\n  render: function () {\n    return (\n      {/*\n        <Tabs/> is a composite component and acts as the main container.\n\n        `onSelect` is called whenever a tab is selected. The handler for\n        this function will be passed the current index as well as the last index.\n\n        `selectedIndex` is the tab to select when first rendered. By default\n        the first (index 0) tab will be selected.\n\n        `forceRenderTabPanel` By default this react-tabs will only render the selected\n        tab's contents. Setting `forceRenderTabPanel` to `true` allows you to override the\n        default behavior, which may be useful in some circumstances (such as animating between tabs).\n\n      */}\n\n      <Tabs\n        onSelect={this.handleSelect}\n        selectedIndex={2}\n      >\n\n        {/*\n          <TabList/> is a composit component and is the container for the <Tab/>s.\n        */}\n\n        <TabList>\n\n          {/*\n            <Tab/> is the actual tab component that users will interact with.\n\n            Selecting a tab can be done by either clicking with the mouse,\n            or by using the keyboard tab to give focus then navigating with\n            the arrow keys (right/down to select tab to the right of selected,\n            left/up to select tab to the left of selected).\n\n            The content of the <Tab/> (this.props.children) will be shown as the label.\n          */}\n\n          <Tab>Foo</Tab>\n          <Tab>Bar</Tab>\n          <Tab>Baz</Tab>\n        </TabList>\n\n        {/*\n          <TabPanel/> is the content for the tab.\n\n          There should be an equal number of <Tab/> and <TabPanel/> components.\n          <Tab/> and <TabPanel/> components are tied together by the order in\n          which they appear. The first (index 0) <Tab/> will be associated with\n          the <TabPanel/> of the same index. Running this example when\n          `selectedIndex` is 0 the tab with the label \"Foo\" will be selected\n          and the content shown will be \"Hello from Foo\".\n\n          As with <Tab/> the content of <TabPanel/> will be shown as the content.\n        */}\n\n        <TabPanel>\n          <h2>Hello from Foo</h2>\n        </TabPanel>\n        <TabPanel>\n          <h2>Hello from Bar</h2>\n        </TabPanel>\n        <TabPanel>\n          <h2>Hello from Baz</h2>\n        </TabPanel>\n      </Tabs>\n    );\n  }\n});\n\nReactDOM.render(<App/>, document.getElementById('container'));\n\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "react-tabs@0.5.3",
  "dist": {
    "shasum": "e92453643eeee381858c2a2cf70e3d13ac0f8ce0"
  },
  "_from": "react-tabs@",
  "_resolved": "https://registry.npmjs.org/react-tabs/-/react-tabs-0.5.3.tgz"
}
